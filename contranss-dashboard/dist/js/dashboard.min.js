angular.module('Dashboard', ['ui.bootstrap', 'ui.router', 'ngCookies', 'uiGmapgoogle-maps', 'ncy-angular-breadcrumb', 'ngResource', 'angularMoment']);

angular.module('Dashboard').config(function(uiGmapGoogleMapApiProvider) {
    uiGmapGoogleMapApiProvider.configure({
        v: '3.17',
        libraries: 'weather,geometry,visualization'
    });
});

angular.module('Dashboard').config(['$breadcrumbProvider', function($breadcrumbProvider) {
    $breadcrumbProvider.setOptions({
      templateUrl: 'templates/breadcrumb.html'
    });
  }
]);

angular.module('Dashboard').constant('angularMomentConfig', {
    timezone: 'Europe/Athens' // optional
});

angular.module('Dashboard').run(function($rootScope, $state, $window, AuthService) {
    $rootScope.$on('$stateChangeStart', function(event, toState, toParams, fromState, fromParams) {
        if (toState.authenticate && !AuthService.isAuthenticated()) {
            console.log('Error');
            event.preventDefault();
            $state.transitionTo('login');
        }
    });
});

angular.module('Dashboard').run(function(Socket) {
    Socket.connect('46.101.249.46', 3000, 'admin', 'admin');
});
angular.module('Dashboard')

.factory('Routes', function($resource) {
  return $resource('http://46.101.249.46/api/routes/:id/', {
		id: '@_id'
	},{
		search: {
			method: 'GET',
			url: 'http://46.101.249.46/api/routes/?search=:search',
			params: {				
				// page: '@_page',
				search: '@_search'
			},
			headers: {
				'Content-Type': 'application/json'
			}
		}
	}, {
		stripTrailingSlashes: false
	});
})

.factory('Status', function($resource) {
  return $resource('http://46.101.249.46/api/status/', {
		id: '@_id'
	},{
		page: {
			method: 'GET',
			url: 'http://46.101.249.46/api/status/?page=:page&size=:size',
			params: {				
				// page: '@_page',
				page: '@_page',
				size: '@_size'
			},
			headers: {
				'Content-Type': 'application/json'
			}
		}
	}, {
		stripTrailingSlashes: false
	});
});
/**
 * Route configuration for the RDash module.
 */
angular.module('Dashboard').config(['$stateProvider', '$urlRouterProvider',
    function($stateProvider, $urlRouterProvider) {
        // For unmatched routes
        $urlRouterProvider.otherwise('/');
        // Application routes
        $stateProvider
            .state('dashboard', {
              abstract: true,
              templateUrl: 'templates/dashboard.html',
              authenticate: true
            })
            .state('dashboard.index', {
                url: '/',
                templateUrl: 'templates/index.html',
                // authenticate: true,
                ncyBreadcrumb: {
                    label: 'Αρχική / Πίνακας Ελέγχου'
                }
            }).state('dashboard.reports', {
                url: '/reports',
                templateUrl: 'templates/tables.html',
                // authenticate: true,
                ncyBreadcrumb: {
                    label: 'Ανάλυση Δεδομένων'
                }
            }).state('login', {
                url: '/login',
                templateUrl: 'templates/login.html',
                authenticate: false
            }).state('register', {
                url: '/register',
                templateUrl: 'templates/register.html',
                authenticate: false
            });
    }
]);
/**
 * Alerts Controller
 */

angular
    .module('Dashboard')
    .controller('AlertsCtrl', ['$scope', AlertsCtrl]);

function AlertsCtrl($scope) {
    $scope.alerts = [{
        type: 'success',
        msg: 'Thanks for visiting! Feel free to create pull requests to improve the dashboard!'
    }, {
        type: 'danger',
        msg: 'Found a bug? Create an issue with as many details as you can.'
    }];

    $scope.addAlert = function() {
        $scope.alerts.push({
            msg: 'Another alert!'
        });
    };

    $scope.closeAlert = function(index) {
        $scope.alerts.splice(index, 1);
    };
}
/**
 * Master Controller
 */
angular.module('Dashboard').controller('MapCtrl', ['$scope', '$cookieStore', 'uiGmapGoogleMapApi', 'Socket', 'Routes', MapCtrl]);

function MapCtrl($scope, $cookieStore, uiGmapGoogleMapApi, Socket, Routes) {
    $scope.map = {
        center: {
            latitude: 37.966667,
            longitude: 23.716667
        },
        zoom: 10
    };
    $scope.windowoptions = {
        pixelOffset: new google.maps.Size(0, 0, 'px', 'px')
    };
    $scope.marker = {
        latitude: 37.966667,
        longitude: 23.716667
    };
    $scope.routes = [];
    uiGmapGoogleMapApi.then(function(maps) {
        Socket.onMessage(function(topic, message) {
            var topic_tokens = topic.split("/");
            Routes.get({
                id: topic_tokens[1]
            }, function(item) {
                var msg = JSON.parse(message.toString());
                // $scope.map = {
                //     center: {
                //         latitude: msg.coords.latitude,
                //         longitude: msg.coords.longitude
                //     }
                // };
                var route = null;
                console.log($scope.routes);
                for (var i = 0; i < $scope.routes.length; i++) {
                    if ($scope.routes[i].id == topic_tokens[1]) {
                        route = $scope.routes[i];
                    }
                }
                if (route) {
                	route.latitude = msg.coords.latitude;
                    route.longitude = msg.coords.longitude;
                } else {
                    route = {
                        id: topic_tokens[1],
                        short_name: item.short_name,
                        text_color: item.text_color,
                        color: item.color,
                        latitude: msg.coords.latitude,
                        longitude: msg.coords.longitude,
                        show: false,
                        time: msg.timestamp
                    };
                    route.onClick = function() {
                        route.show = !route.show;
                    };
                    $scope.routes.push(route);
                }
                console.log($scope.routes);
            });
            $scope.$apply();
        });
        Socket.subscribe('track/#');
    });
}
/**
 * Master Controller
 */
angular.module('Dashboard').controller('MasterCtrl', ['$scope', '$cookieStore', 'uiGmapGoogleMapApi', 'Socket', MasterCtrl]);

function MasterCtrl($scope, $cookieStore, uiGmapGoogleMapApi, Socket) {
    /**
     * Sidebar Toggle & Cookie Control
     */
    var mobileView = 1200;
    $scope.getWidth = function() {
        return window.innerWidth;
    };
    $scope.$watch($scope.getWidth, function(newValue, oldValue) {
        if (newValue >= mobileView) {
            if (angular.isDefined($cookieStore.get('toggle'))) {
                $scope.toggle = !$cookieStore.get('toggle') ? false : true;
            } else {
                $scope.toggle = true;
            }
        } else {
            $scope.toggle = false;
        }
    });
    $scope.toggleSidebar = function() {
        $scope.toggle = !$scope.toggle;
        $cookieStore.put('toggle', $scope.toggle);
    };
    window.onresize = function() {
        $scope.$apply();
    };
}
angular.module('Dashboard').controller('NotificationCtrl', ['Status', '$timeout', NotificationCtrl]);

function NotificationCtrl(Status, $timeout) {
    var vm = this;

    function info() {
        swal({
            title: "HTML <small>Title</small>!",
            text: 'A custom <span style="color:#F8BB86">html<span> message.',
            html: true
        });
    }
    vm.info = info;

    function callAtTimeout() {
        var notifications = [];
        Status.get({}, function(status) {
            status.hits.forEach(function(item) {
                notifications.push(item._source);
            });
        });
        vm.notifications = notifications;
        console.log('lol');
    }
    callAtTimeout();
    $timeout(callAtTimeout, 5000);
}
/**
 * Loading Directive
 * @see http://tobiasahlin.com/spinkit/
 */

angular
    .module('Dashboard')
    .directive('rdLoading', rdLoading);

function rdLoading() {
    var directive = {
        restrict: 'AE',
        template: '<div class="loading"><div class="double-bounce1"></div><div class="double-bounce2"></div></div>'
    };
    return directive;
};
/**
 * Widget Body Directive
 */

angular
    .module('Dashboard')
    .directive('rdWidgetBody', rdWidgetBody);

function rdWidgetBody() {
    var directive = {
        requires: '^rdWidget',
        scope: {
            loading: '@?',
            classes: '@?'
        },
        transclude: true,
        template: '<div class="widget-body" ng-class="classes"><rd-loading ng-show="loading"></rd-loading><div ng-hide="loading" class="widget-content" ng-transclude></div></div>',
        restrict: 'E'
    };
    return directive;
};
/**
 * Widget Footer Directive
 */

angular
    .module('Dashboard')
    .directive('rdWidgetFooter', rdWidgetFooter);

function rdWidgetFooter() {
    var directive = {
        requires: '^rdWidget',
        transclude: true,
        template: '<div class="widget-footer" ng-transclude></div>',
        restrict: 'E'
    };
    return directive;
};
/**
 * Widget Header Directive
 */

angular
    .module('Dashboard')
    .directive('rdWidgetHeader', rdWidgetTitle);

function rdWidgetTitle() {
    var directive = {
        requires: '^rdWidget',
        scope: {
            title: '@',
            icon: '@'
        },
        transclude: true,
        template: '<div class="widget-header"><i class="fa" ng-class="icon"></i> {{title}} <div class="pull-right" ng-transclude></div></div>',
        restrict: 'E'
    };
    return directive;
}
/**
 * Widget Directive
 */

angular
    .module('Dashboard')
    .directive('rdWidget', rdWidget);

function rdWidget() {
    var directive = {
        transclude: true,
        template: '<div class="widget" ng-transclude></div>',
        restrict: 'EA'
    };
    return directive;

    function link(scope, element, attrs) {
        /* */
    }
}
angular.module('Dashboard').factory('API', function($rootScope) {

});
angular
  .module('Dashboard')
  .factory('authInterceptor', authInterceptor);

angular.module('Dashboard').config(function($httpProvider) {
  $httpProvider.interceptors.push('authInterceptor');
});

function authInterceptor($rootScope, $q, $window) {
  return {
    request: function(config) {
      config.headers = config.headers || {};
      if ($window.localStorage.token) {
        config.headers.Authorization = 'JWT ' + $window.localStorage.token;
      }
      return config;
    },
    responseError: function(rejection) {
      if (rejection.status === 403) {
        delete $window.localStorage.token;
        delete $window.localStorage.pbx;
        sweetAlert({
          title: 'Oops...',
          text: 'Your login session has expired.',
          type: 'error',
          confirmButtonColor: '#DD6B55',
          confirmButtonText: 'Login Again!'
        }, function() {});
      }
      return $q.reject(rejection);
    }
  };
}
angular
	.module('Dashboard')
	.factory('AuthService', AuthService);

function AuthService($rootScope, $q, $window) {
    return {
        isAuthenticated: function() {
            return $window.localStorage.token;
        }
    };
}
angular.module('Dashboard').factory('Socket', function($rootScope) {
    var service = {};
    var client = {};

    service.connect = function(host, port, user, password) {
        var options = {
            username: user,
            password: password
        };
        console.log("Try to connect to MQTT Broker " + host + " with user " + user);
        client = mqtt.connect('ws://' + host + ':' + port);

        client.on('error', function(err) {
            console.log('error!', err);
            client.stream.end();
        });
    };

    service.subscribe = function(topic) {
        client.subscribe(topic);
        console.log('subscribe ' + topic);
        client.on('error', function(err) {
            console.log('error!', err);
            client.stream.end();
        });
        client.on('message', function(topic, message) {
            service.callback(topic, message);
        });
    };

    service.publish = function(topic, payload) {
        client.publish(topic, payload, {
            retain: true
        });
        console.log('publish-Event sent ' + payload + ' with topic: ' + topic + ' ' + client);
    };
    service.onMessage = function(callback) {
        service.callback = callback;
    };
    return service;
});